---
title: "wrangling_and_cleaning"
author: "AT"
format: html
---

## Load libraries
```{r}
library(dplyr)
library(tidyr)
library(readr)
```


## Load data

bit.ly/data-wrangle-lesson-data

```{r}
catch_original <- read_csv("https://knb.ecoinformatics.org/knb/d1/mn/v2/object/df35b.302.1")
```


## Data cleaning & wrangling

### Initial data exploration

```{r}
colnames(catch_original)
```

```{r}
head(catch_original)
```

```{r}
summary(catch_original)
```

```{r}
unique(catch_original$Region)
```

```{r}
#View(catch_original)
```

### Filtering data

```{r}
catch_data <- catch_original %>% 
  select(Region,Year,Chinook,Sockeye,Coho,Pink,Chum)
```

```{r}
catch_original %>% select(-All,-notesRegCode)
```

### Quality check

```{r}
dplyr::glimpse(catch_data)
```

### Change column content

Goal: Convert the Chinook catch values to "numeric" and overwrite the old Chinook column

```{r}
catch_clean <- catch_data %>% 
  mutate(Chinook = as.numeric(Chinook))
```

### Find row with "NA" value

```{r}
which(is.na(catch_clean$Chinook))
```

```{r}
catch_data[i,]
```

Using the pipe operator:

```{r}
i <- catch_clean$Chinook %>% 
  is.na() %>% 
  which()
```

```{r}
catch_clean %>% 
  filter(is.na(Chinook))
```

Goal: Change the value of the "Chinook" column to 1 if the value is equal to the letter I

```{r}
catch_clean <- catch_data %>% 
  mutate(Chinook = if_else(Chinook=="I","1",Chinook),
         Chinook = as.numeric(Chinook))
head(catch_clean)
```

## Summary stats with 'pivot_longer()' and 'pivot_wider()'

Goal: Transform data from wide format to a long format

```{r}
catch_long <- catch_clean %>% 
  #pivot longer all columns except Region and Year
  pivot_longer(cols = -c(Region, Year),
               names_to = "species",
               values_to = "catch")
```

```{r}
catch_long %>% 
  pivot_wider(names_from = species,
              values_from = catch)
```

## Renaming columns

Goal: Rename "catch" column to be called "catch_thousands"

```{r}
catch_long <- catch_long %>% 
  rename(catch_thousands = catch)
```

## Adding columns with mutate()

Goal: Create a column "catch" with units of individual fish, instead of thousands of fish

```{r}
catch_long <- catch_long %>% 
  mutate(catch = catch_thousands*1000)
head(catch_long)
```

Goal: remove "catch_thousands" column

```{r}
catch_long <- catch_long %>% 
  select(-catch_thousands)
head(catch_long)
```

## Summary statistics

bit.ly/3ppGUsQ

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch = mean(catch))
head(mean_region)
```

## 'filter()'

Goal: Go back to our catch_long data frame and select all the rows from the SSE region

```{r}
sse_catch <- catch_long %>% 
  filter(Region=="SSE")
head(sse_catch)
```

Quick exercise:

Filter to catches over 1 million fish:

```{r}
catch_long %>% 
  filter(catch>1000000)
```

Select rows from the SSE region that have information about Chinook salmon:

```{r}
catch_long %>% 
  filter(Region=="SSE",
         species=="Chinook")
```

## Sort data

Goal: Re-calculate the mean catch by region, then order the output by mean catch in descending order

```{r}
mean_region <- catch_long %>% 
  group_by(Region) %>% 
  summarize(mean_catch = mean(catch)) %>% 
  arrange(desc(mean_catch))
head(mean_region)
```

## 'separate()' and 'unite()'

separate() to split a single column
unite() to combine columns

```{r}
sites_df <- data.frame(site = c("HAW-101",
                                "HAW-103",
                                "OAH-320",
                                "OAH-219",
                                "MAI-039"))
df <- sites_df %>% 
  separate(site, c("island","site_num"), "-")
```

```{r}
df %>% 
  unite(code, island, site_num, sep="-")
```

## Grand finale

```{r}

```

